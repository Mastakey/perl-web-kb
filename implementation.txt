~~~~~~~
Phase 1
-------

Create Database
	Make Schema
	Create Table sql
	insert row sql
Commands:
	create:
		sqlite3.exe kb_1.db < create_table.sql
	drop:
		sqlite3.exe kb_1.db < drop_table.sql
	insert:
		sqlite3.exe kb_1.db < insert.sql
	select:
		sqlite3.exe kb_1.db < selete.sql

Functional and Logical pieces
	Add:
	AddSection.pl
		input: database,name,sectionid
		output: pass or fail
		side effect: insert into table_section

	AddUser.pl
		input: database,name,username,email
		output: pass or fail
		side effect: insert to table_user
	AddEntry.pl
		input: database,name,content,username,section,tags
		output: pass or fail
		side effect: 
			insert to table_tag
			insert to table_entry_tag
			insert to table_content
			insert to table_entry

	View:
	ViewAllSections.pl
		input: database
		output: all active sections in the db
		side effect: none
	ViewSectionEntries.pl
		input: sectionid
		output: all active entries in section
	ViewTagEntries.pl
		input: tag
		output: all active entries with tag	
	ViewEntry.pl
		input: entryid
		output: entry info
	ViewUsers.pl
		input: none
		output: all active users
	ViewUser.pl
		input: userid
		output: user info

	Edit:
	EditSection.pl
	EditEntry.pl
	EditUser.pl
	EditTag.pl
	Delete (flag as inactive):
	DeleteSection.pl
	DeleteEntry.pl
	DeleteUser.pl
	DeleteTag.pl
	
Web UI
	Initial View
		Create css, layout
		Create html footer, header
**********************************************************		
	web - static:
	viewSections.pl
	viewSection.pl
		use htmlcgi in tmpl files
	
	web - dynamic:
	viewSectionAdd.pl
	addSection.pl
		use cssDir in tmpl files
		
CONFIG
------
YAML config file with 
lib: ROOT/cgi-bin/lib
config: ROOT/config
log: ROOT/log
html: ROOT/html
tmpl: ROOT/tmpl
tmpl_includes: ROOT/tmpl/includes
odbc: dbi:SQLite:,KB,dbname=ROOT/db/data/kb_1.db,,

Directory Structural differences:
Setting 1:
ROOT
	cgi-bin
		kb
			lib
			web
				view
				admin
			func
			config.yml <-- must be the same directory as lib folder
	kb
		html
		tmpl
		config
config.yml:
		root: ../../../
		configDir: kb/config
		cgiDir: cgi-bin/kb
		htmlDir: kb/html
		libDir: cgi-bin/kb/lib
		logDir: kb/log
		tmplDir: kb/tmpl
		dbDir: kb/db/data
		db_odbc_driver: 'dbi:SQLite:'
		db_odbc_dbname: kb_1.db
		db_odbc_user:
		db_odbc_pass:
		htmlcgi: ../../cgi-bin/kb
		cssDir: kb/html/css
		
Setting 2:
ROOT
	kb
		cgi-bin
			lib
			web
				view
				admin
			func
			config.yml <-- must be the same directory as lib folder
		html
		tmpl
		config
	config.yml:
		root: ../../../
		configDir: kb/config
		cgiDir: kb/cgi-bin
		htmlDir: kb/html
		libDir: kb/cgi-bin/lib
		logDir: kb/log
		tmplDir: kb/tmpl
		dbDir: kb/db/data
		db_odbc_driver: 'dbi:SQLite:'
		db_odbc_dbname: kb_1.db
		db_odbc_user:
		db_odbc_pass:
		htmlcgi: ../cgi-bin

		
Assumptions:
	Assume lib directory will not change from where web/func are located.
	i.e. use lib "$FindBin::Bin/../../lib"; for scrips in web/view directory
	config.yml must be in the same folder as the lib directory
	This is used in CONFIG.pm, it assumes that config.yml can be found one directory above the current directory
	

Static Pages (for automation):
------------------------------
viewSections.pl => viewSections.html => update on AddSection/EditSection/DeleteSection

Dynamic Pages:
--------------
viewSection.pl?sectionId=$sectionId

FTP Deploy
----------
Transfer 
perl-web-kb/html
perl-web-kb/tmpl
perl-web-kb/config
cgi-bin/perl-web-kb/lib
	DO NOT COPY TEMPLATE OR YAML
	DELETE if neccessary
cgi-bin/perl-web-kb/web
cgi-bin/perl-web-kb/func
cgi-bin/perl-web-kb/admin

TODO
----
breadcrumbs - Done
CSS for table, buttons - Done
ftp deploy script - Need to be a separate project create a perl FTPDEPLOY.pm
View Entries by Tag - Done
Password protect - Done

Admin Entries
Move entries on Admin
Admin: Ordering of Sections, Entries

Upload files to Entries
Entry content for code, links etc - integrate with http://alexgorbatchev.com/SyntaxHighlighter/

Hide parent id and show parent name in forms
Show deleted sections - Done
Ability to hide/show Section tree

LOGIN system! - Done?